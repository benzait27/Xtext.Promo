/**
 * generated by Xtext 2.10.0
 */
package fr.pari10.miage.promo.promoDSL.util;

import fr.pari10.miage.promo.promoDSL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.pari10.miage.promo.promoDSL.PromoDSLPackage
 * @generated
 */
public class PromoDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PromoDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PromoDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PromoDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PromoDSLSwitch<Adapter> modelSwitch =
    new PromoDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModele(Modele object)
      {
        return createModeleAdapter();
      }
      @Override
      public Adapter caseLivre(Livre object)
      {
        return createLivreAdapter();
      }
      @Override
      public Adapter caseChapitre(Chapitre object)
      {
        return createChapitreAdapter();
      }
      @Override
      public Adapter caseRecette(Recette object)
      {
        return createRecetteAdapter();
      }
      @Override
      public Adapter caseAlternatives(Alternatives object)
      {
        return createAlternativesAdapter();
      }
      @Override
      public Adapter caseIngredient(Ingredient object)
      {
        return createIngredientAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Modele <em>Modele</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Modele
   * @generated
   */
  public Adapter createModeleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Livre <em>Livre</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Livre
   * @generated
   */
  public Adapter createLivreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Chapitre <em>Chapitre</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Chapitre
   * @generated
   */
  public Adapter createChapitreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Recette <em>Recette</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Recette
   * @generated
   */
  public Adapter createRecetteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Alternatives <em>Alternatives</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Alternatives
   * @generated
   */
  public Adapter createAlternativesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Ingredient <em>Ingredient</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Ingredient
   * @generated
   */
  public Adapter createIngredientAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.pari10.miage.promo.promoDSL.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.pari10.miage.promo.promoDSL.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PromoDSLAdapterFactory
