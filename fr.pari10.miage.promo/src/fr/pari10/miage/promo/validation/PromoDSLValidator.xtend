/*
 * generated by Xtext 2.10.0
 */
package fr.pari10.miage.promo.validation

import fr.pari10.miage.promo.promoDSL.Livre
import org.eclipse.xtext.validation.Check
import fr.pari10.miage.promo.promoDSL.PromoDSLPackage
import fr.pari10.miage.promo.promoDSL.Recette
import fr.pari10.miage.promo.promoDSL.Ingredient

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PromoDSLValidator extends AbstractPromoDSLValidator {
	
  public static val Warning_auteur = "warning nom auteur"
// c''est validation
    @Check(FAST)
def verifier(Livre livre){
	if (!Character.isUpperCase(livre.nomDuLauteur.charAt(0))) {
		warning('Name should start with a capital', 
					PromoDSLPackage.Literals.LIVRE__NOM_DU_LAUTEUR,
					Warning_auteur)
	}
}

public static val Warning_Recette = "Nom du recette ne doit pas être redondant"
    @Check(NORMAL)
def verifierRectte(Livre livre){
	
	val compnots = livre.eAllContents // recuper tout les contenat de livre (chapitre, recette ...)
	.filter(typeof(Recette)) // prendre que les recette
	.map[name] // prendre que le nom des recette
	.toList // transformer en liste
	if (compnots.stream.distinct.count!=compnots.size) 
	  // compnots.stream.distinct = une liste qui contien tout les contenu de compnots sans avoir de redandant
	 {
		error("Nom du recette ne doit pas être redondant",PromoDSLPackage.Literals.LIVRE__NOM_DU_LAUTEUR,Warning_Recette)
		
	}
}

public static val Warning_Sucre = "Le Sucre doit être inferieur à 25"
    @Check(NORMAL)
def verifierSucre(Livre livre){
	
	// on recuper tout les recettes du livre
	val Recett = livre.eAllContents
	.filter(typeof(Recette))
	.toList
	// pour parcourir tout les recettes 
  for(Recette re: Recett ){
	     
	    // le poids du sucre
	 	var PoidS = 0;
	 	
	 // pour chaque recette on recuper tout les ingredients et les met dans ing
       val ing = re.ingredients;
 
    // pour chaque ingredient on recuper tout les nom et poids
         for(Ingredient r:ing ){
         	// verifier que le nom de l'ingredient est sucre 
            if (r.nomDuIng.equals("sucre")){
            	// somme tout les poids de sucre
            	PoidS = PoidS+r.num;           
         }    	
         }
         // affiche l'erreur dés qu'on trouve un cas
         if (PoidS>25)
          error('Le Sucre doit être inferieur à 25', 
					PromoDSLPackage.Literals.LIVRE__NOM_DU_LAUTEUR,
					Warning_Sucre)
        }

}


}
