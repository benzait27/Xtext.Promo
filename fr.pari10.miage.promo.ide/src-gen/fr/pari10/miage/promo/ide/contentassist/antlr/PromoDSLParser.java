/*
 * generated by Xtext 2.10.0
 */
package fr.pari10.miage.promo.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.pari10.miage.promo.ide.contentassist.antlr.internal.InternalPromoDSLParser;
import fr.pari10.miage.promo.services.PromoDSLGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class PromoDSLParser extends AbstractContentAssistParser {

	@Inject
	private PromoDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPromoDSLParser createParser() {
		InternalPromoDSLParser result = new InternalPromoDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLivreAccess().getGroup(), "rule__Livre__Group__0");
					put(grammarAccess.getChapitreAccess().getGroup(), "rule__Chapitre__Group__0");
					put(grammarAccess.getRecetteAccess().getGroup(), "rule__Recette__Group__0");
					put(grammarAccess.getRecetteAccess().getGroup_6(), "rule__Recette__Group_6__0");
					put(grammarAccess.getRecetteAccess().getGroup_9(), "rule__Recette__Group_9__0");
					put(grammarAccess.getRecetteAccess().getGroup_10(), "rule__Recette__Group_10__0");
					put(grammarAccess.getRecetteAccess().getGroup_10_2(), "rule__Recette__Group_10_2__0");
					put(grammarAccess.getIngredientAccess().getGroup(), "rule__Ingredient__Group__0");
					put(grammarAccess.getModeleAccess().getLivreAssignment(), "rule__Modele__LivreAssignment");
					put(grammarAccess.getLivreAccess().getNomDuLivreAssignment_1(), "rule__Livre__NomDuLivreAssignment_1");
					put(grammarAccess.getLivreAccess().getNomDuLauteurAssignment_3(), "rule__Livre__NomDuLauteurAssignment_3");
					put(grammarAccess.getLivreAccess().getChapitreAssignment_4(), "rule__Livre__ChapitreAssignment_4");
					put(grammarAccess.getChapitreAccess().getNumDuChapitreAssignment_1(), "rule__Chapitre__NumDuChapitreAssignment_1");
					put(grammarAccess.getChapitreAccess().getRecetteAssignment_2(), "rule__Chapitre__RecetteAssignment_2");
					put(grammarAccess.getRecetteAccess().getNameAssignment_1(), "rule__Recette__NameAssignment_1");
					put(grammarAccess.getRecetteAccess().getNumPhotoAssignment_3(), "rule__Recette__NumPhotoAssignment_3");
					put(grammarAccess.getRecetteAccess().getIngredientsAssignment_5(), "rule__Recette__IngredientsAssignment_5");
					put(grammarAccess.getRecetteAccess().getIngredientsAssignment_6_1(), "rule__Recette__IngredientsAssignment_6_1");
					put(grammarAccess.getRecetteAccess().getInstructionsAssignment_8(), "rule__Recette__InstructionsAssignment_8");
					put(grammarAccess.getRecetteAccess().getInstructionsAssignment_9_1(), "rule__Recette__InstructionsAssignment_9_1");
					put(grammarAccess.getRecetteAccess().getAlternativesAssignment_10_1(), "rule__Recette__AlternativesAssignment_10_1");
					put(grammarAccess.getRecetteAccess().getAlternativesAssignment_10_2_1(), "rule__Recette__AlternativesAssignment_10_2_1");
					put(grammarAccess.getAlternativesAccess().getAltNumAssignment(), "rule__Alternatives__AltNumAssignment");
					put(grammarAccess.getIngredientAccess().getNomDuIngAssignment_0(), "rule__Ingredient__NomDuIngAssignment_0");
					put(grammarAccess.getIngredientAccess().getNumAssignment_1(), "rule__Ingredient__NumAssignment_1");
					put(grammarAccess.getIngredientAccess().getUniteAssignment_2(), "rule__Ingredient__UniteAssignment_2");
					put(grammarAccess.getInstructionAccess().getNumDuInstructionAssignment(), "rule__Instruction__NumDuInstructionAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPromoDSLParser typedParser = (InternalPromoDSLParser) parser;
			typedParser.entryRuleModele();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PromoDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PromoDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
